generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  id      Int      @id @default(autoincrement())
  user_id Int?
  post_id Int?
  content String
  reviews reviews? @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model likes {
  id           Int      @id @default(autoincrement())
  user_id      Int?
  liked_review Int?
  reviews      reviews? @relation(fields: [liked_review], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users        users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, liked_review], map: "uniques")
}

model races {
  id           Int          @id @default(autoincrement())
  season       Int
  round        Int
  circuit_name String
  notes        String?
  cover        String?
  denomination String?      @db.VarChar(50)
  url          String?      @db.VarChar(20)
  date         DateTime?    @db.Date
  fav_races    fav_races[]
  race_liked   race_liked[]
  ratings      ratings[]
  reviews      reviews[]
  viewed       viewed[]

  @@unique([season, round, circuit_name], map: "unique_races")
}

model reviews {
  id         Int        @id @default(autoincrement())
  user_id    Int?
  race_id    Int?
  content    String
  created_at DateTime   @db.Date
  updated_at DateTime   @db.Date
  comments   comments[]
  likes      likes[]
  races      races?     @relation(fields: [race_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, race_id], map: "unique_ids")
}

model users {
  id                                      Int              @id @default(autoincrement())
  username                                String           @unique @db.VarChar(50)
  email                                   String           @unique @db.VarChar(30)
  password                                String
  comments                                comments[]
  fav_races                               fav_races[]
  following_following_follower_idTousers  following[]      @relation("following_follower_idTousers")
  following_following_following_idTousers following[]      @relation("following_following_idTousers")
  likes                                   likes[]
  lists                                   lists[]
  lists_comments                          lists_comments[]
  lists_likes                             lists_likes[]
  race_liked                              race_liked[]
  ratings                                 ratings[]
  reviews                                 reviews[]
  viewed                                  viewed[]
}

model race_liked {
  user_id Int
  race_id Int
  races   races @relation(fields: [race_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   users @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, race_id])
}

model viewed {
  user_id Int
  race_id Int
  races   races @relation(fields: [race_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   users @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, race_id])
}

model ratings {
  user_id Int
  race_id Int
  rating  Float     @db.Real
  date    DateTime? @db.Date
  races   races     @relation(fields: [race_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, race_id])
}

model lists {
  id             Int              @id @default(autoincrement())
  name           String
  user_id        Int?
  description    String?
  races          Int[]
  privacy        String           @db.VarChar(20)
  ranked         Boolean
  users          users?           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  lists_comments lists_comments[]
  lists_likes    lists_likes[]

  @@unique([user_id, name], map: "unique_user_name")
}

model lists_likes {
  user_id Int
  list_id Int
  lists   lists @relation(fields: [list_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   users @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, list_id])
}

model lists_comments {
  id           Int       @id @default(autoincrement())
  user_id      Int
  list_id      Int
  content      String
  published_at DateTime? @db.Date
  lists        lists     @relation(fields: [list_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users        users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model following {
  follower_id                         Int
  following_id                        Int
  users_following_follower_idTousers  users @relation("following_follower_idTousers", fields: [follower_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_following_following_idTousers users @relation("following_following_idTousers", fields: [following_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([follower_id, following_id])
}

model fav_races {
  user_id Int
  race_id Int
  races   races @relation(fields: [race_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   users @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, race_id])
}
