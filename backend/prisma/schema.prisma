generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  id      Int      @id @default(autoincrement())
  user_id Int?
  post_id Int?
  content String
  reviews reviews? @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model likes {
  id           Int      @id @default(autoincrement())
  user_id      Int?
  liked_review Int?
  reviews      reviews? @relation(fields: [liked_review], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users        users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model races {
  id           Int          @id @default(autoincrement())
  season       Int
  round        Int
  circuit_name String
  notes        String?
  cover        String?
  denomination String?      @db.VarChar(50)
  url          String?      @db.VarChar(20)
  date         DateTime?    @db.Date
  race_liked   race_liked[]
  ratings      ratings[]
  reviews      reviews[]
  viewed       viewed[]

  @@unique([season, round, circuit_name], map: "unique_races")
}

model reviews {
  id         Int        @id @default(autoincrement())
  user_id    Int?
  race_id    Int?
  rating     Int?
  content    String
  created_at DateTime   @db.Date
  updated_at DateTime   @db.Date
  comments   comments[]
  likes      likes[]
  races      races?     @relation(fields: [race_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, race_id], map: "unique_ids")
}

model users {
  id         Int          @id @default(autoincrement())
  username   String       @unique @db.VarChar(50)
  email      String       @unique @db.VarChar(30)
  password   String
  comments   comments[]
  likes      likes[]
  race_liked race_liked[]
  ratings    ratings[]
  reviews    reviews[]
  viewed     viewed[]
}

model race_liked {
  user_id Int
  race_id Int
  races   races @relation(fields: [race_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   users @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, race_id])
}

model viewed {
  user_id Int
  race_id Int
  races   races @relation(fields: [race_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   users @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, race_id])
}

model ratings {
  user_id Int
  race_id Int
  rating  Int
  races   races @relation(fields: [race_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   users @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, race_id])
}
